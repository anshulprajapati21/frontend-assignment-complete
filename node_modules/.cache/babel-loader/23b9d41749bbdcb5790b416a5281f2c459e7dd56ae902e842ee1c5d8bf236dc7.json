{"ast":null,"code":"import { createSlice, nanoid } from '@reduxjs/toolkit';\nconst initialMembers = [{\n  id: 'm1',\n  name: 'Alice Johnson',\n  status: 'Offline',\n  attendance: 'Absent',\n  tasks: []\n}, {\n  id: 'm2',\n  name: 'Bob Smith',\n  status: 'Break',\n  attendance: 'Present',\n  tasks: [{\n    id: 't1',\n    title: 'Fix login bug',\n    dueDate: '2025-09-25',\n    progress: 20,\n    completed: false\n  }]\n}, {\n  id: 'm3',\n  name: 'Clara Lee',\n  status: 'Meeting',\n  attendance: 'Late',\n  tasks: []\n}, {\n  id: 'm4',\n  name: 'David Kim',\n  status: 'Offline',\n  attendance: 'On Leave',\n  tasks: []\n}];\nconst membersSlice = createSlice({\n  name: 'members',\n  initialState: {\n    list: initialMembers\n  },\n  reducers: {\n    assignTask: {\n      reducer(state, action) {\n        const {\n          memberId,\n          task\n        } = action.payload;\n        const m = state.list.find(x => x.id === memberId);\n        if (m) m.tasks.push(task);\n      },\n      prepare(memberId, title, dueDate) {\n        return {\n          payload: {\n            memberId,\n            task: {\n              id: nanoid(),\n              title,\n              dueDate,\n              progress: 0,\n              completed: false\n            }\n          }\n        };\n      }\n    },\n    updateStatus(state, action) {\n      const {\n        memberId,\n        status\n      } = action.payload;\n      const m = state.list.find(x => x.id === memberId);\n      if (m) m.status = status;\n    },\n    updateAttendance(state, action) {\n      const {\n        memberId,\n        attendance\n      } = action.payload;\n      const m = state.list.find(x => x.id === memberId);\n      if (m) m.attendance = attendance;\n    },\n    applyLeave(state, action) {\n      const {\n        memberId,\n        days\n      } = action.payload;\n      const m = state.list.find(x => x.id === memberId);\n      if (m) m.attendance = 'On Leave';\n    },\n    incrementProgress(state, action) {\n      const {\n        memberId,\n        taskId\n      } = action.payload;\n      const m = state.list.find(x => x.id === memberId);\n      if (!m) return;\n      const t = m.tasks.find(tt => tt.id === taskId);\n      if (!t || t.completed) return;\n      t.progress = Math.min(100, t.progress + 10);\n      if (t.progress >= 100) {\n        t.completed = true;\n        t.progress = 100;\n      }\n    },\n    decrementProgress(state, action) {\n      const {\n        memberId,\n        taskId\n      } = action.payload;\n      const m = state.list.find(x => x.id === memberId);\n      if (!m) return;\n      const t = m.tasks.find(tt => tt.id === taskId);\n      if (!t) return;\n      t.progress = Math.max(0, t.progress - 10);\n      if (t.progress < 100) t.completed = false;\n    },\n    addMember(state, action) {\n      state.list.push({\n        id: nanoid(),\n        name: action.payload.name,\n        status: 'Offline',\n        attendance: 'Absent',\n        tasks: []\n      });\n    }\n  }\n});\nexport const {\n  assignTask,\n  updateStatus,\n  updateAttendance,\n  applyLeave,\n  incrementProgress,\n  decrementProgress,\n  addMember\n} = membersSlice.actions;\nexport default membersSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","initialMembers","id","name","status","attendance","tasks","title","dueDate","progress","completed","membersSlice","initialState","list","reducers","assignTask","reducer","state","action","memberId","task","payload","m","find","x","push","prepare","updateStatus","updateAttendance","applyLeave","days","incrementProgress","taskId","t","tt","Math","min","decrementProgress","max","addMember","actions"],"sources":["C:/Users/Asus/Downloads/Frontend_Assignment_Appversal_complete/frontend-assignment-complete/src/redux/slices/membersSlice.js"],"sourcesContent":["import { createSlice, nanoid } from '@reduxjs/toolkit';\n\nconst initialMembers = [\n  { id: 'm1', name: 'Alice Johnson', status: 'Offline', attendance: 'Absent', tasks: [] },\n  { id: 'm2', name: 'Bob Smith', status: 'Break', attendance: 'Present', tasks: [\n      { id: 't1', title: 'Fix login bug', dueDate: '2025-09-25', progress: 20, completed:false }\n    ] },\n  { id: 'm3', name: 'Clara Lee', status: 'Meeting', attendance: 'Late', tasks: [] },\n  { id: 'm4', name: 'David Kim', status: 'Offline', attendance: 'On Leave', tasks: [] },\n];\n\nconst membersSlice = createSlice({\n  name: 'members',\n  initialState: {\n    list: initialMembers\n  },\n  reducers:{\n    assignTask: {\n      reducer(state, action){\n        const { memberId, task } = action.payload;\n        const m = state.list.find(x => x.id === memberId);\n        if(m) m.tasks.push(task);\n      },\n      prepare(memberId, title, dueDate){\n        return { payload: { memberId, task: { id: nanoid(), title, dueDate, progress:0, completed:false } } };\n      }\n    },\n    updateStatus(state, action){\n      const { memberId, status } = action.payload;\n      const m = state.list.find(x => x.id === memberId);\n      if(m) m.status = status;\n    },\n    updateAttendance(state, action){\n      const { memberId, attendance } = action.payload;\n      const m = state.list.find(x => x.id === memberId);\n      if(m) m.attendance = attendance;\n    },\n    applyLeave(state, action){\n      const { memberId, days } = action.payload;\n      const m = state.list.find(x => x.id === memberId);\n      if(m) m.attendance = 'On Leave';\n    },\n    incrementProgress(state, action){\n      const { memberId, taskId } = action.payload;\n      const m = state.list.find(x => x.id === memberId);\n      if(!m) return;\n      const t = m.tasks.find(tt => tt.id === taskId);\n      if(!t || t.completed) return;\n      t.progress = Math.min(100, t.progress + 10);\n      if(t.progress >= 100){ t.completed = true; t.progress = 100; }\n    },\n    decrementProgress(state, action){\n      const { memberId, taskId } = action.payload;\n      const m = state.list.find(x => x.id === memberId);\n      if(!m) return;\n      const t = m.tasks.find(tt => tt.id === taskId);\n      if(!t) return;\n      t.progress = Math.max(0, t.progress - 10);\n      if(t.progress < 100) t.completed = false;\n    },\n    addMember(state, action){\n      state.list.push({ id: nanoid(), name: action.payload.name, status: 'Offline', attendance: 'Absent', tasks: [] });\n    }\n  }\n});\n\nexport const { assignTask, updateStatus, updateAttendance, applyLeave, incrementProgress, decrementProgress, addMember } = membersSlice.actions;\nexport default membersSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,MAAM,QAAQ,kBAAkB;AAEtD,MAAMC,cAAc,GAAG,CACrB;EAAEC,EAAE,EAAE,IAAI;EAAEC,IAAI,EAAE,eAAe;EAAEC,MAAM,EAAE,SAAS;EAAEC,UAAU,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAG,CAAC,EACvF;EAAEJ,EAAE,EAAE,IAAI;EAAEC,IAAI,EAAE,WAAW;EAAEC,MAAM,EAAE,OAAO;EAAEC,UAAU,EAAE,SAAS;EAAEC,KAAK,EAAE,CAC1E;IAAEJ,EAAE,EAAE,IAAI;IAAEK,KAAK,EAAE,eAAe;IAAEC,OAAO,EAAE,YAAY;IAAEC,QAAQ,EAAE,EAAE;IAAEC,SAAS,EAAC;EAAM,CAAC;AAC1F,CAAC,EACL;EAAER,EAAE,EAAE,IAAI;EAAEC,IAAI,EAAE,WAAW;EAAEC,MAAM,EAAE,SAAS;EAAEC,UAAU,EAAE,MAAM;EAAEC,KAAK,EAAE;AAAG,CAAC,EACjF;EAAEJ,EAAE,EAAE,IAAI;EAAEC,IAAI,EAAE,WAAW;EAAEC,MAAM,EAAE,SAAS;EAAEC,UAAU,EAAE,UAAU;EAAEC,KAAK,EAAE;AAAG,CAAC,CACtF;AAED,MAAMK,YAAY,GAAGZ,WAAW,CAAC;EAC/BI,IAAI,EAAE,SAAS;EACfS,YAAY,EAAE;IACZC,IAAI,EAAEZ;EACR,CAAC;EACDa,QAAQ,EAAC;IACPC,UAAU,EAAE;MACVC,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAC;QACpB,MAAM;UAAEC,QAAQ;UAAEC;QAAK,CAAC,GAAGF,MAAM,CAACG,OAAO;QACzC,MAAMC,CAAC,GAAGL,KAAK,CAACJ,IAAI,CAACU,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACtB,EAAE,KAAKiB,QAAQ,CAAC;QACjD,IAAGG,CAAC,EAAEA,CAAC,CAAChB,KAAK,CAACmB,IAAI,CAACL,IAAI,CAAC;MAC1B,CAAC;MACDM,OAAOA,CAACP,QAAQ,EAAEZ,KAAK,EAAEC,OAAO,EAAC;QAC/B,OAAO;UAAEa,OAAO,EAAE;YAAEF,QAAQ;YAAEC,IAAI,EAAE;cAAElB,EAAE,EAAEF,MAAM,CAAC,CAAC;cAAEO,KAAK;cAAEC,OAAO;cAAEC,QAAQ,EAAC,CAAC;cAAEC,SAAS,EAAC;YAAM;UAAE;QAAE,CAAC;MACvG;IACF,CAAC;IACDiB,YAAYA,CAACV,KAAK,EAAEC,MAAM,EAAC;MACzB,MAAM;QAAEC,QAAQ;QAAEf;MAAO,CAAC,GAAGc,MAAM,CAACG,OAAO;MAC3C,MAAMC,CAAC,GAAGL,KAAK,CAACJ,IAAI,CAACU,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACtB,EAAE,KAAKiB,QAAQ,CAAC;MACjD,IAAGG,CAAC,EAAEA,CAAC,CAAClB,MAAM,GAAGA,MAAM;IACzB,CAAC;IACDwB,gBAAgBA,CAACX,KAAK,EAAEC,MAAM,EAAC;MAC7B,MAAM;QAAEC,QAAQ;QAAEd;MAAW,CAAC,GAAGa,MAAM,CAACG,OAAO;MAC/C,MAAMC,CAAC,GAAGL,KAAK,CAACJ,IAAI,CAACU,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACtB,EAAE,KAAKiB,QAAQ,CAAC;MACjD,IAAGG,CAAC,EAAEA,CAAC,CAACjB,UAAU,GAAGA,UAAU;IACjC,CAAC;IACDwB,UAAUA,CAACZ,KAAK,EAAEC,MAAM,EAAC;MACvB,MAAM;QAAEC,QAAQ;QAAEW;MAAK,CAAC,GAAGZ,MAAM,CAACG,OAAO;MACzC,MAAMC,CAAC,GAAGL,KAAK,CAACJ,IAAI,CAACU,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACtB,EAAE,KAAKiB,QAAQ,CAAC;MACjD,IAAGG,CAAC,EAAEA,CAAC,CAACjB,UAAU,GAAG,UAAU;IACjC,CAAC;IACD0B,iBAAiBA,CAACd,KAAK,EAAEC,MAAM,EAAC;MAC9B,MAAM;QAAEC,QAAQ;QAAEa;MAAO,CAAC,GAAGd,MAAM,CAACG,OAAO;MAC3C,MAAMC,CAAC,GAAGL,KAAK,CAACJ,IAAI,CAACU,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACtB,EAAE,KAAKiB,QAAQ,CAAC;MACjD,IAAG,CAACG,CAAC,EAAE;MACP,MAAMW,CAAC,GAAGX,CAAC,CAAChB,KAAK,CAACiB,IAAI,CAACW,EAAE,IAAIA,EAAE,CAAChC,EAAE,KAAK8B,MAAM,CAAC;MAC9C,IAAG,CAACC,CAAC,IAAIA,CAAC,CAACvB,SAAS,EAAE;MACtBuB,CAAC,CAACxB,QAAQ,GAAG0B,IAAI,CAACC,GAAG,CAAC,GAAG,EAAEH,CAAC,CAACxB,QAAQ,GAAG,EAAE,CAAC;MAC3C,IAAGwB,CAAC,CAACxB,QAAQ,IAAI,GAAG,EAAC;QAAEwB,CAAC,CAACvB,SAAS,GAAG,IAAI;QAAEuB,CAAC,CAACxB,QAAQ,GAAG,GAAG;MAAE;IAC/D,CAAC;IACD4B,iBAAiBA,CAACpB,KAAK,EAAEC,MAAM,EAAC;MAC9B,MAAM;QAAEC,QAAQ;QAAEa;MAAO,CAAC,GAAGd,MAAM,CAACG,OAAO;MAC3C,MAAMC,CAAC,GAAGL,KAAK,CAACJ,IAAI,CAACU,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACtB,EAAE,KAAKiB,QAAQ,CAAC;MACjD,IAAG,CAACG,CAAC,EAAE;MACP,MAAMW,CAAC,GAAGX,CAAC,CAAChB,KAAK,CAACiB,IAAI,CAACW,EAAE,IAAIA,EAAE,CAAChC,EAAE,KAAK8B,MAAM,CAAC;MAC9C,IAAG,CAACC,CAAC,EAAE;MACPA,CAAC,CAACxB,QAAQ,GAAG0B,IAAI,CAACG,GAAG,CAAC,CAAC,EAAEL,CAAC,CAACxB,QAAQ,GAAG,EAAE,CAAC;MACzC,IAAGwB,CAAC,CAACxB,QAAQ,GAAG,GAAG,EAAEwB,CAAC,CAACvB,SAAS,GAAG,KAAK;IAC1C,CAAC;IACD6B,SAASA,CAACtB,KAAK,EAAEC,MAAM,EAAC;MACtBD,KAAK,CAACJ,IAAI,CAACY,IAAI,CAAC;QAAEvB,EAAE,EAAEF,MAAM,CAAC,CAAC;QAAEG,IAAI,EAAEe,MAAM,CAACG,OAAO,CAAClB,IAAI;QAAEC,MAAM,EAAE,SAAS;QAAEC,UAAU,EAAE,QAAQ;QAAEC,KAAK,EAAE;MAAG,CAAC,CAAC;IAClH;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAES,UAAU;EAAEY,YAAY;EAAEC,gBAAgB;EAAEC,UAAU;EAAEE,iBAAiB;EAAEM,iBAAiB;EAAEE;AAAU,CAAC,GAAG5B,YAAY,CAAC6B,OAAO;AAC/I,eAAe7B,YAAY,CAACK,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}